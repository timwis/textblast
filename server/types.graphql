type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  email: String! @isUnique
  auth0UserId: String @isUnique

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  twilioSubaccount: TwilioSubaccount @relation(name: "UserTwilioSubaccount")
  recipients: [Recipient!]! @relation(name: "UserRecipients")
  blasts: [Blast!]! @relation(name: "UserBlasts")
  inbounds: [Inbound!]! @relation(name: "UserInbounds")
}

type TwilioSubaccount @model {
  id: ID! @isUnique
  user: User! @relation(name: "UserTwilioSubaccount")
  sid: String!
  authToken: String!
  createdAt: DateTime!

  twilioMessagingService: TwilioMessagingService @relation(name: "TwilioSubaccountTwilioMessagingService")
  twilioNotifyService: TwilioNotifyService @relation(name: "TwilioSubaccountTwilioNotifyService")
  twilioPhoneNumber: TwilioPhoneNumber @relation(name: "TwilioSubaccountTwilioPhoneNumber")
}

type TwilioMessagingService @model {
  id: ID! @isUnique
  twilioSubaccount: TwilioSubaccount! @relation(name: "TwilioSubaccountTwilioMessagingService")
  sid: String!
  createdAt: DateTime!
}

type TwilioNotifyService @model {
  id: ID! @isUnique
  twilioSubaccount: TwilioSubaccount! @relation(name: "TwilioSubaccountTwilioNotifyService")
  sid: String!
  createdAt: DateTime!
}

type TwilioPhoneNumber @model {
  id: ID! @isUnique
  twilioSubaccount: TwilioSubaccount! @relation(name: "TwilioSubaccountTwilioPhoneNumber")
  sid: String!
  phoneNumber: String!
  createdAt: DateTime!
}

type Recipient @model {
  id: ID! @isUnique
  user: User! @relation(name: "UserRecipients")
  tags: [String!]!
  phoneNumber: String!
  name: String
  blasts: [Blast!]! @relation(name: "BlastRecipients")
  inbounds: [Inbound!]! @relation(name: "RecipientInbounds")

  createdAt: DateTime!
  updatedAt: DateTime!
}

enum BlastStatus {
  NEW
  SENT
  FAILED
}

type Blast @model {
  id: ID! @isUnique
  user: User! @relation(name: "UserBlasts")
  body: String!
  twilioNotificationSid: String
  status: BlastStatus @defaultValue(value: "NEW")
  recipients: [Recipient!]! @relation(name: "BlastRecipients")

  createdAt: DateTime!
}

type Inbound @model {
  id: ID! @isUnique
  twilioSid: String!
  user: User! @relation(name: "UserInbounds")
  recipient: Recipient @relation(name: "RecipientInbounds")
  body: String!

  createdAt: DateTime!
}
